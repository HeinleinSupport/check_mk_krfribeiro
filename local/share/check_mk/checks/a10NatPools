factory_settings["a10NatPools_default_levels"] = {
    "poolmisses"                 :       (10,20),
}

def inventory_a10NatPools(info):
    inventory = []
    for line in info:
        inventory.append((line[0],a10NatPools_default_levels))
    return inventory

def check_a10NatPools(item, params, info):
    for line in info:
       if line[0] == item:
           warn, crit = params.get("poolmisses")
           perfdata = []
           status = int(line[4])

           this_time = int(time.time())
           # TotalPortsUsed = get_rate("a10_natpools.portsused.%s" % item, this_time, int(line[1]))
           TotalPortsUsed = int(line[1])
           TotalUsedAddresses = get_rate("a10_natpools.usedaddresses.%s" % item, this_time, int(line[2]))
           TotalFreeAddresses = get_rate("a10_natpools.freeaddresses.%s" % item, this_time, int(line[3]))
           TotalNatMisses = get_rate("a10_natpools.totalmisses.%s" % item, this_time, int(line[4]))

           perf = [
                ("NATtotalportsused",TotalPortsUsed),
                ("NATtotalusedaddresses",TotalUsedAddresses),
                ("NATtotalfreeaddresses",TotalFreeAddresses),
                ("NATtotalmisses",TotalNatMisses),
           ]

           if TotalNatMisses > crit:
               return (2, "CRIT - NAT Pool has %s total misses" % TotalNatMisses , perf)
           elif TotalNatMisses > warn:
               return (1, "WARN - NAT Pool has %s total misses" % TotalNatMisses , perf)
           else:
               return (0, "OK - NAT Pool is OK", perf)
    return (3, "UNKNOWN - Nat Pool %s not found in SNMP output" % item)

check_info["a10NatPools"] = {
    "check_function"        : check_a10NatPools,
    "inventory_function"    : inventory_a10NatPools,
    "service_description"   : "A10 NATPool - %s",
    "has_perfdata":         True,
    "group"                 : "a10NatPools",
    "snmp_info"             : ( ".1.3.6.1.4.1.22610.2.4.3.18.100.1.1", [ "1", "4", "5", "6", "7" ] ),
    "default_levels_variable" : "a10NatPools_default_levels"
}
