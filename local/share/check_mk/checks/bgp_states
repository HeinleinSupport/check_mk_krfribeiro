#!/usr/bin/env python
# Author : ricardoftribeiro@gmail.com @krfribeiro
# -*- coding: utf-8 -*-
#
# For more details check BGP-MIB @ http://www.circitor.fr/Mibs/Html/B/BGP4-MIB.php
#
# .1.3.6.1.2.1.15.3.1.1 -  bgpPeerIdentifier
# .1.3.6.1.2.1.15.3.1.2 -  bgpPeerState
#        INTEGER { idle(1),
#                  connect(2),
#                  active(3),
#                  opensent(4),
#                  openconfirm(5),
#                  established(6)
#                }

def inventory_bgp_states(info):
    inventory = []
    for peering_partner_ip, bgp_state, bgp_admin_state in info:
        if int(bgp_state) != 1:
                inventory.append( (peering_partner_ip, None) )
    return inventory

def check_bgp_states(item, _no_params, info):
    bgp_state_map = [             "dummy",
                                  "idle",        # 1
                                  "connect",     # 2
                                  "active",      # 3
                                  "opensent",    # 4
                                  "openconfirm", # 5
                                  "established" ]# 6
    bgp_admin_state_map = [       "dummy",
                                  "stop",         # 1
                                  "start" ]       # 2
    status = 0
    for peering_partner_ip, bgp_state, bgp_admin_state in info:
        if not bgp_state or not bgp_admin_state:
            return 3, "Missing SNMP data"
        bgp_state = int(bgp_state)
        bgp_admin_state = int(bgp_admin_state)

        if peering_partner_ip == item:
            operational_state_error_string = ""
            state_error_string = ""

            if bgp_admin_state != 2:
                status = 1
                operational_state_error_string = "(!)"
            elif bgp_state != 6:
                status = 2
                state_error_string = "(!!)"

            return status, "Status with peer %s is %s%s, operational status: %s%s" \
                   % (peering_partner_ip, \
                   bgp_state_map[bgp_state], state_error_string, \
                   bgp_admin_state_map[bgp_admin_state], \
                   operational_state_error_string)
    return 3, "Peering partner %s not configured" % item
 
check_info["bgp_states"] = {
    "check_function"        : check_bgp_states,
    "inventory_function"    : inventory_bgp_states,
    "service_description"   : "BGP Status Peer %s",
    'snmp_scan_function'    : lambda oid: oid(".1.3.6.1.4.1.2636.*") in [ None , "" ],
    "snmp_info"             : ('.1.3.6.1.2.1.15.3.1',             [ OID_END,       #
                                                                    2,       #
                                                                    3 ]),    #
}
partner %s not configured" % item

